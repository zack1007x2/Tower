apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'



android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId 'org.droidplanner.android'
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 30106
        versionName getGitVersion()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDir 'libs' // This is not necessary unless you have precompiled libraries in your project.
            jni.srcDirs = []// This prevents the auto generation of Android.mk
        }

        // Move the tests to tests/java, tests/res, etc...
        androidTest {
            java.srcDirs = ['test']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    //FIXME: remove this after lint errors have been taken care of
    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release {
            storeFile getAppKeystoreFile()
            storePassword getAppKeystorePassword()
            keyAlias getAppKey()
            keyPassword getAppKeyPassword()
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile
            if (file != null && file.name.endsWith('.apk')) {
                def buildType = variant.buildType.getName()
                def versionCode = defaultConfig.versionCode
                output.outputFile = new File(file.parent, "tower-${buildType}.${versionCode}.apk")
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix ".debug"
        }

        release {
            signingConfig signingConfigs.release
        }
    }


    productFlavors {
        arm {
            ndk {
                abiFilter "armeabi"
            }
        }
    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir = "/Applications/adt-bundle-mac-x86_64-20140702/ndk"
        commandLine "$ndkDir/ndk-build",
                '-C', file('jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'all',
                'NDK_DEBUG=1'
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = "/Applications/adt-bundle-mac-x86_64-20140702/ndk"
        commandLine "$ndkDir/ndk-build",
                '-C', file('jni').absolutePath,
                'clean'
    }

    clean.dependsOn 'cleanNative'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }
}

/**
 * @return The most recent git tag to be used as version name for the app.
 */
def getGitVersion(){
    def cmd = "git describe --tag"
    try {
        def proc = cmd.execute()
        return proc.text.trim()
    }catch(IOException e){
        //Unable to find 'git'
        return "please update version name manually"
    }
}

def getAppKeystoreFile() {
    def filePath = hasProperty('ORG_DROIDPLANNER_ANDROID_KEYSTORE') ? ORG_DROIDPLANNER_ANDROID_KEYSTORE : null
    return filePath ? file(filePath) : null
}

def getAppKeystorePassword(){
    return hasProperty('ORG_DROIDPLANNER_ANDROID_KEYSTORE_PWD') ? ORG_DROIDPLANNER_ANDROID_KEYSTORE_PWD : ''
}

def getAppKeyPassword() {
    return hasProperty('ORG_DROIDPLANNER_ANDROID_KEY_PWD') ? ORG_DROIDPLANNER_ANDROID_KEY_PWD : ''
}

def getAppKey() {
    return hasProperty('ORG_DROIDPLANNER_ANDROID_KEY_ALIAS') ? ORG_DROIDPLANNER_ANDROID_KEY_ALIAS : ''
}




dependencies {
    compile 'com.google.android.gms:play-services-maps:7.3.0'
    compile 'com.google.android.gms:play-services-location:7.3.0'
    compile 'com.google.android.gms:play-services-analytics:7.3.0'

    compile 'com.sothree.slidinguppanel:library:2.0.2'

    compile 'com.android.support:support-v4:22.1.1'
    compile 'com.android.support:appcompat-v7:22.1.1'
    compile 'com.android.support:cardview-v7:22.1.0'
    compile 'com.android.support:recyclerview-v7:22.1.0'

    compile 'com.o3dr.android:dronekit-android:2.3.34'

    compile 'me.grantland:autofittextview:0.2.1'
    compile(name:'shimmer-android-release', ext:'aar')

    compile files('libs/droneapi-java-0.3-SNAPSHOT.jar')
    compile files('libs/j2xx.jar')
    compile files('libs/protobuf-java-2.5.0.jar')
    compile files('libs/jeromq-0.3.4.jar')
    compile files('libs/sius-0.3.2-SNAPSHOT.jar')

    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.3.0'

    compile 'com.jakewharton.timber:timber:3.1.0'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile fileTree(dir: 'libs', include: '*.jar')
}
